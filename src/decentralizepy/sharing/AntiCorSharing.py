import copy
import importlib
import logging

import numpy as np

from decentralizepy.sharing.SharingAsymmetric import SharingAsymmetric


class AntiCorSharing(SharingAsymmetric):
    """
    API defining who to share with and what, and what to do on receiving

    """

    def send_all(self, neighbors, averaging_round=0):
        logging.info(
            f"Sending to all the neighbors {neighbors} for averaging step {averaging_round}"
        )

        to_send = self.get_data_to_send()
        to_send["CHANNEL"] = "DPSGD"
        to_send["averaging_round"] = averaging_round

        if averaging_round == 0:  # Only noise on the first averaging round

            noise = self.noise_generator.normal(
                0, self.noise_std, to_send["params"].shape
            )

            self.generated_noise_std = np.std(noise)
            logging.info(
                f"Total noise std: {self.generated_noise_std}, expected std {self.noise_std}."
            )

            if self.previous_noise is None:
                # Should only happen in first iteration
                logging.debug("Not correlating as it is the first iteration")
                noise_to_add = noise
            else:
                noise_to_add = noise - self.previous_noise

            to_send["params"] += noise_to_add
            # Push the change to the node's model.
            self.model.load_state_dict(self.deserialized_model(to_send))
            # TODO: This implementation will not work with compression algorithms, since we noise the compressed value here

            # Update the previous noise.
            self.previous_noise = noise

        for i, neighbor in enumerate(neighbors):
            if averaging_round == 0 and i == 0:
                # We attack an arbitrary neighbor (always the same in a static topology)
                self.check_and_save_sent_model(to_send["params"], neighbor)
            self.communication.send(neighbor, to_send)

    def __init__(
        self,
        rank,
        machine_id,
        communication,
        mapping,
        graph,
        model,
        dataset,
        log_dir,
        compress=False,
        compression_package=None,
        compression_class=None,
        noise_std=0,
        save_models_for_attacks=-1,
        sharing_seed=421,
        save_all_models=True,
        nb_models_to_save=1,
    ):
        """
        Constructor

        Parameters
        ----------
        rank : int
            Local rank
        machine_id : int
            Global machine id
        communication : decentralizepy.communication.Communication
            Communication module used to send and receive messages
        mapping : decentralizepy.mappings.Mapping
            Mapping (rank, machine_id) -> uid
        graph : decentralizepy.graphs.Graph
            Graph representing neighbors
        model : decentralizepy.models.Model
            Model to train
        dataset : decentralizepy.datasets.Dataset
            Dataset for sharing data. Not implemented yet! TODO
        log_dir : str
            Location to write shared_params (only writing for 2 procs per machine)
        compress: bool, default False
            Wether to apply a compression method or not.
        compression_package : str
            Import path of a module that implements the compression.Compression.Compression class
        compression_class : str
            Name of the compression class inside the compression package
        noise_std: int, default 0
            The std of the original Gaussian noises generated by ZeroSum
        save_models_for_attacks: int, default -1
            The interval at which a sent model must be logged.
        sharing_seed: int, default 421
            The seed for the generated noises.
        save_all_models: bool, default True
            Whether to save all models for the attack, or only models for the first of each node.
        nb_models_to_save: int, default 1
            How many nodes' outgoing models are to be saved. Requires `save_all_models` to be False.
        """
        self.noise_std = noise_std
        self.generated_noise_std = None
        self.previous_noise = None

        super().__init__(
            rank=rank,
            machine_id=machine_id,
            communication=communication,
            mapping=mapping,
            graph=graph,
            model=model,
            dataset=dataset,
            log_dir=log_dir,
            compress=compress,
            compression_package=compression_package,
            compression_class=compression_class,
            save_models_for_attacks=save_models_for_attacks,
            save_all_models=save_all_models,
            nb_models_to_save=nb_models_to_save,
        )
        self.seed = sharing_seed
        logging.info("Random sharing seed: %s", self.seed)
        self.noise_generator = np.random.default_rng(seed=self.seed * 1000 + self.uid)
