import copy
import importlib
import logging

import numpy as np

from decentralizepy.sharing.ZeroSumSharing import ZeroSumSharing


class ShiftedZeroSumSharing(ZeroSumSharing):
    """
    API defining who to share with and what, and what to do on receiving

    """

    def generate_noises(self, nb_neighbors, model_shape):
        assert (
            self.add_self_noise
        ), "ShiftedZeroSumSharing and its inheritents should have self noise"

        std_to_gen = self.noise_std

        local_offset = np.random.normal(0, self.shift_std, size=model_shape)
        logging.info("Expected offset: %s", self.shift_std)
        logging.info("Generated local offset std : %s.", np.std(local_offset))
        logging.debug("Local offset : %s", local_offset)

        noises = np.random.normal(
            local_offset, std_to_gen, (nb_neighbors + 1,) + model_shape
        )

        # Normalize the noise, we simply override the last noise
        noises[-1] = -np.sum(noises[:-1, ::], axis=0)

        logging.debug("Sum of noises is %s", np.sum(noises, axis=0))
        logging.debug("Std of the self noise: %s", np.std(noises[-1]))
        # Statistics logging
        self.generated_noise_std = np.std(noises[:-1])
        logging.info(
            f"Total noise std: {self.generated_noise_std}, expected std {self.noise_std}. Generated with std {std_to_gen}."
        )
        # logging.debug(f"Noise shape : {noises.shape}. Avg shape : {avg_noise.shape}.")

        return noises

    def __init__(
        self,
        rank,
        machine_id,
        communication,
        mapping,
        graph,
        model,
        dataset,
        log_dir,
        compress=False,
        compression_package=None,
        compression_class=None,
        noise_std=0,
        save_models_for_attacks=-1,
        shift_std=0,
    ):
        """
        Constructor

        Parameters
        ----------
        rank : int
            Local rank
        machine_id : int
            Global machine id
        communication : decentralizepy.communication.Communication
            Communication module used to send and receive messages
        mapping : decentralizepy.mappings.Mapping
            Mapping (rank, machine_id) -> uid
        graph : decentralizepy.graphs.Graph
            Graph representing neighbors
        model : decentralizepy.models.Model
            Model to train
        dataset : decentralizepy.datasets.Dataset
            Dataset for sharing data. Not implemented yet! TODO
        log_dir : str
            Location to write shared_params (only writing for 2 procs per machine)
        compress: bool, default False
            Wether to apply a compression method or not.
        compression_package : str
            Import path of a module that implements the compression.Compression.Compression class
        compression_class : str
            Name of the compression class inside the compression package
        noise_std: int, default 0
            The std of the original Gaussian noises generated by ZeroSum
        save_models_for_attacks: int, default -1
            The interval at which a sent model must be logged.
        self_noise: bool, default False
            Whether to also noise the local model or not
        """
        self.shift_std = shift_std
        super().__init__(
            rank=rank,
            machine_id=machine_id,
            communication=communication,
            mapping=mapping,
            graph=graph,
            model=model,
            dataset=dataset,
            log_dir=log_dir,
            compress=compress,
            compression_package=compression_package,
            compression_class=compression_class,
            noise_std=noise_std,
            save_models_for_attacks=save_models_for_attacks,
            self_noise=True,  # In order to cancel in this setting, the node MUST have self noise.
        )

        logging.info("Shift std: %s", self.shift_std)
